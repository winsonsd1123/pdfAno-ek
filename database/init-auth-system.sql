-- ======================================================================
-- 用户认证与权限管理系统 - 数据库初始化脚本
-- ======================================================================
-- 
-- 用途: 为 pdfAno-ek 项目初始化用户认证和权限管理系统的数据库表
-- 执行环境: Supabase PostgreSQL
-- 创建时间: 2024
-- 
-- 使用说明:
-- 1. 在 Supabase 项目的 SQL Editor 中执行此脚本
-- 2. 执行前确保项目已启用 Supabase Auth
-- 3. 此脚本会创建表结构、基础数据和触发器
-- 
-- ======================================================================

-- 1. 创建角色表 (Roles Table)
-- 这张表定义了系统中有哪些用户角色，比如'管理员'、'普通用户'
CREATE TABLE IF NOT EXISTS roles (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  description TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE roles IS '存储用户角色，如管理员、普通用户等';

-- 2. 创建个人资料表 (Profiles Table)
-- 这张表用来存放用户的公开信息，关联了 Supabase 自带的 auth.users 表
CREATE TABLE IF NOT EXISTS profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  email TEXT UNIQUE,
  username TEXT UNIQUE,
  full_name TEXT,
  avatar_url TEXT,
  id_number TEXT, -- 学号或工号
  role_id BIGINT REFERENCES roles(id),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE profiles IS '存储用户的公开资料，并与认证用户表关联';

-- 3. 创建权限表 (Permissions Table)
-- 定义了系统中所有可能的操作权限，做到原子化
CREATE TABLE IF NOT EXISTS permissions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  action TEXT NOT NULL, -- 例如: 'create', 'read', 'update', 'delete', 'manage'
  subject TEXT NOT NULL, -- 例如: 'document', 'user', 'role', 'all'
  description TEXT,
  UNIQUE(action, subject)
);
COMMENT ON TABLE permissions IS '定义系统中的原子操作权限';

-- 4. 创建角色-权限关联表 (Role-Permissions Junction Table)
-- 这是一张中间表，用于给角色分配多个权限
CREATE TABLE IF NOT EXISTS role_permissions (
  role_id BIGINT NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
  permission_id BIGINT NOT NULL REFERENCES permissions(id) ON DELETE CASCADE,
  PRIMARY KEY (role_id, permission_id)
);
COMMENT ON TABLE role_permissions IS '角色与权限的多对多关联表';

-- 5. 插入初始数据
-- 预置'管理员'和'普通用户'两个角色
INSERT INTO roles (name, description) 
VALUES ('admin', '超级管理员'), ('user', '普通用户')
ON CONFLICT (name) DO NOTHING;

-- 预置一些基础权限
INSERT INTO permissions (action, subject, description) VALUES 
  ('manage', 'all', '拥有所有权限'),
  ('read', 'documents', '查看文档'),
  ('create', 'documents', '创建文档'),
  ('update', 'documents', '编辑文档'),
  ('delete', 'documents', '删除文档'),
  ('read', 'users', '查看用户信息'),
  ('update', 'users', '编辑用户信息'),
  ('delete', 'users', '删除用户'),
  ('read', 'roles', '查看角色'),
  ('create', 'roles', '创建角色'),
  ('update', 'roles', '编辑角色'),
  ('delete', 'roles', '删除角色'),
  ('manage', 'permissions', '管理权限分配')
ON CONFLICT (action, subject) DO NOTHING;

-- 6. 给'admin'角色分配'manage:all'权限
-- 注意: 这里需要先查询到'admin'角色的id和'manage:all'权限的id
INSERT INTO role_permissions (role_id, permission_id)
SELECT
  (SELECT id from roles WHERE name = 'admin'),
  (SELECT id from permissions WHERE action = 'manage' AND subject = 'all')
ON CONFLICT DO NOTHING;

-- 7. 设置一个触发器，在新用户注册时自动创建 profile
-- This function will be triggered after a new user signs up
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  -- Assign 'user' role by default
  INSERT INTO public.profiles (id, email, role_id)
  VALUES (
    NEW.id,
    NEW.email,
    (SELECT id FROM public.roles WHERE name = 'user')
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 删除旧的触发器（如果存在）并创建新的
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- ======================================================================
-- 脚本执行完毕
-- ======================================================================
-- 
-- 执行结果检查:
-- 1. 运行 SELECT * FROM roles; 应该能看到 'admin' 和 'user' 两个角色
-- 2. 运行 SELECT * FROM permissions; 应该能看到多个权限记录
-- 3. 运行 SELECT * FROM role_permissions; 应该能看到 admin 拥有 manage:all 权限
-- 4. 现在注册新用户时，会自动在 profiles 表中创建记录并分配为 'user' 角色
-- 
-- ====================================================================== 