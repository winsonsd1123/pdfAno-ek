// PDF.js 相关类型定义
export interface PDFDocumentProxy {
  numPages: number
  getPage: (pageNumber: number) => Promise<PDFPageProxy>
  getDestinations: () => Promise<any>
  cleanup: () => void
}

export interface PDFPageProxy {
  getViewport: (options: { scale: number; rotation?: number }) => PDFPageViewport
  render: (renderContext: any) => PDFRenderTask
  getTextContent: () => Promise<TextContent>
  getAnnotations: () => Promise<any[]>
  cleanup: () => void
}

export interface PDFPageViewport {
  width: number
  height: number
  transform: number[]
  clone: (options?: { scale?: number; rotation?: number }) => PDFPageViewport
}

export interface PDFRenderTask {
  promise: Promise<void>
  cancel: () => void
}

export interface TextContent {
  items: TextItem[]
}

export interface TextItem {
  str: string
  dir: string
  width: number
  height: number
  transform: number[]
  fontName: string
}

// 坐标系统类型定义
export interface CoordinateInfo {
  // PDF原始坐标系统
  pdfCoordinates: {
    x: number
    y: number
    width: number
    height: number
  }
  // 视口坐标系统
  viewportCoordinates: {
    x: number
    y: number
    width: number
    height: number
  }
  // 页面尺寸信息
  pageSize: {
    width: number
    height: number
  }
}

// 搜索结果类型
export interface SearchResult {
  pageIndex: number
  textIndex: number
  paragraphIndex: number
  text: string
  x: number
  y: number
  width: number
  height: number
  context: string
  // 详细的坐标信息
  coordinates: {
    // PDF原始坐标系统
    pdfCoordinates: {
      x: number
      y: number
      width: number
      height: number
    }
    // 视口坐标系统
    viewportCoordinates: {
      x: number
      y: number
      width: number
      height: number
    }
    // 变换矩阵
    transform: number[]
    // 页面尺寸信息
    pageSize: {
      width: number
      height: number
    }
    // 相对位置百分比
    relativePosition: {
      xPercent: number
      yPercent: number
    }
  }
}

// 批注回复类型
export interface AnnotationReply {
  id: string
  author: {
    name: string
    role: string
    avatar?: string
    color: string
  }
  content: string
  timestamp: string
  // 编辑状态
  isEditing?: boolean
}

// 批注类型
export interface Annotation {
  id: string
  pageIndex: number
  // 标记为deprecated，但保留以支持迁移
  x?: number
  y?: number
  width?: number
  height?: number
  content: string
  type: "highlight" | "note"
  // 作者信息
  author: {
    name: string
    role: string
    avatar?: string
    color: string
  }
  timestamp: string
  isExpanded?: boolean // 控制展开/折叠状态
  // AI批注结构
  aiAnnotation?: {
    selectedText: string
    mergedContent: string // 合并后的教师点评风格内容
    originalData: {
      title: string
      description: string
      suggestion: string
      annotationType: string
      severity: string
    }
  }
  // 批注回复
  replies?: AnnotationReply[]
  // 统一的坐标信息 - 现在是必需字段
  coordinates: CoordinateInfo
  // 编辑状态
  isEditing?: boolean
}

// 搜索选项类型
export interface SearchOptions {
  query?: string
  targetPage?: number
  returnFirst?: boolean
}

// 鼠标坐标信息类型
export interface MouseCoordinates {
  pageIndex: number
  pdfCoords: { x: number; y: number }
  viewportCoords: { x: number; y: number }
  pageSize: { width: number; height: number }
}

// 调试信息类型
export interface DebugInfo {
  text: string
  page: number
  found: boolean
  coordinates?: {
    viewport: { x: string; y: string }
    pdf: { x: string; y: string }
    size: { w: string; h: string }
    pageSize: { w: string; h: string }
  }
  fallbackCoordinates?: { x: number; y: number }
  actualPage?: number
  searchStrategy?: string
}

// PDF加载配置类型
export interface PDFLoadConfig {
  url: string
  cMapUrl?: string
  cMapPacked?: boolean
  workerSrc?: string
}

// 渲染配置类型
export interface RenderConfig {
  scale: number
  rotation?: number
}

// 搜索文本匹配结果类型
export interface TextMatchResult {
  found: boolean
  strategy: 'direct' | 'clean' | 'very_clean' | 'word_match' | 'sequence_match' | 'number_chinese'
  confidence: number
}

// ============ AI批注服务相关类型 ============

// AI批注原始数据类型
export interface AIAnnotationRawData {
  id: string
  type: string
  severity: string
  page?: number
  title: string
  description: string
  suggestion: string
  selected: string
  isAutoGenerated?: boolean
}

// AI服务响应类型
export interface AIServiceResponse {
  content: string
  status: 'success' | 'error'
  message?: string
}

// AI批注配置类型
export interface AIAnnotationConfig {
  model: string
  prompt: string
  maxRetries?: number
  timeout?: number
}

// AI批注进度回调类型
export type AIAnnotationProgressCallback = (message: string) => void

// AI批注错误类型
export interface AIAnnotationError {
  code: string
  message: string
  details?: any
}

// AI批注定位结果类型
export interface AIAnnotationLocationResult {
  annotation: AIAnnotationRawData
  location: SearchResult | null
  coordinates: CoordinateInfo | null
  strategy: string
  success: boolean
}
